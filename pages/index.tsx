import type { NextPage } from "next";
import dynamic from "next/dynamic";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { useState, useEffect } from "react";
import React from "react";
import Container from "@mui/material/Container";
import Chart from "../components/Chart";
import Grid from "@mui/material/Grid";
import Paper from "@mui/material/Paper";
import useSWR from "swr";
const apiURL = process.env.NEXT_PUBLIC_API_URL;

const Map = dynamic(() => import("../components/Map"), {
  loading: () => <p>Loading...</p>,
  ssr: false,
});
const Header = dynamic(() => import("../components/Header"), {
  loading: () => <p>Loading...</p>,
  ssr: false,
});

const Home: NextPage = () => {
  const [WAQIData, setWAQIData] = useState(null);
  const [archiveData, setArchiveData] = useState(null);
  const [astonData, setAstonData] = useState(null);

  const fetcher = (...args) => fetch(...args).then((res) => res.json());
  const { data: plumeData, error, isLoading } = useSWR(
    apiURL + "/plume",
    fetcher
  );

  const multipleFetcher = (urls: string[]) => {
    const f = (url: string) => fetch(url).then(r => r.json()).catch((err) => console.log( err ))
    return Promise.all(urls.map(url => f(url)))
  }
  
  //TODO implement requests using this function rather than multiple useEffect hooks
  const useMultipleRequests = () => {
    const urls = [apiURL + '/plume', apiURL + '/waqi', apiURL + '/waqi-archive', apiURL + '/aston']
    const { data, error } = useSWR(urls, multipleFetcher)
    console.log(data)
    return {
      data: data,
      isError: !!error,
      isLoading: !data && !error,
      error: error
    }
  }

  // const { data , isLoading:loading} = useMultipleRequests()
  // if (!loading) console.log(data)

  useEffect(() => {
    const fetchWAQIData = async () => {
      const waqiUrl = apiURL + `/waqi`;
      await fetch(waqiUrl)
        .then((response) => response.text())
        .then((res) => JSON.parse(res))
        .then((json) => {
          setWAQIData(json);
        })
        .catch((err) => console.log({ err }));
    };
    fetchWAQIData();
  }, []);
  useEffect(() => {
    const fetchArchiveData = async () => {
      const archiveUrl = apiURL + `/waqi-archive`;
      await fetch(archiveUrl)
        .then((response) => response.text())
        .then((res) => JSON.parse(res))
        .then((json) => {
          setArchiveData(json);
          console.log(json);
        })
        .catch((err) => console.log({ err }));
    };
    fetchArchiveData();
  }, []);
  useEffect(() => {
    const fetchAstonData = async () => {
      const astonUrl = apiURL + `/aston`;
      await fetch(astonUrl)
        .then((response) => response.text())
        .then((res) => JSON.parse(res))
        .then((json) => {
          setAstonData(json);
          console.log(json);
        })
        .catch((err) => console.log({ err }));
    };
    fetchAstonData();
  }, []);
  if (!plumeData) return <div>Loading...</div>
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* <Header></Header> */}
      <main className={styles.main}>
        <Container fixed sx={{ minWidth: "250px" }}>
          {WAQIData && (
            <Map
              WAQIData={WAQIData}
              plumeData={plumeData}
              archiveData={archiveData}
              astonData={astonData}
            />
          )}
        </Container>
        <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
          <Grid container spacing={3}>
            {/* Chart */}
            <Grid item xs={12} md={8} lg={9}>
              <Paper
                sx={{
                  p: 2,
                  display: "flex",
                  flexDirection: "column",
                  height: 240,
                }}
              >
                <Chart />
              </Paper>
            </Grid>
            {/* Recent Deposits */}
            <Grid item xs={12} md={4} lg={3}>
              <Paper
                sx={{
                  p: 2,
                  display: "flex",
                  flexDirection: "column",
                  height: 240,
                }}
              >
                {/* <Deposits /> */}
              </Paper>
            </Grid>
            {/* Recent Orders */}
            <Grid item xs={12}>
              <Paper sx={{ p: 2, display: "flex", flexDirection: "column" }}>
                {/* <Orders /> */}
              </Paper>
            </Grid>
          </Grid>
          {/* <Copyright sx={{ pt: 4 }} /> */}
        </Container>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
};

export default Home;
