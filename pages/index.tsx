import type { NextPage } from "next";
import dynamic from "next/dynamic";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { Marker, Popup } from "react-map-gl";
import { useState, useEffect } from "react";
import React from "react";
import prisma from '../lib/prisma';
export async function getServerSideProps() {
  const plumeData = await prisma.plume_sensor.findMany({
    select: {
      id: true,
      latitude: true,
      longitude: true,
      pm10: true,
      voc: true,
      no2: true,
    },
    where: {
      latitude: { not: null },
      longitude: { not: null },
    },
    orderBy: {
      id: "desc"
    }
  })

  // restricted to Birmingham
  const boundedData = await prisma.$queryRaw`SELECT id, latitude, longitude, pm10, voc, no2 from plume_sensor where ST_Intersects(ST_MakeEnvelope(-2.175293, 52.277401, -1.576538, 52.608052), st_point(longitude, latitude)::geography)`;
  return {
    props: {plumeData}, // will be passed to the page component as props
  }
}


const formatSensorData = (data) => {
  // console.log(data.plumeData)
  let formatted = data.map((sensor) => {
    return {
      type: "Feature",
      geometry: { type: "Point", coordinates: [sensor.longitude, sensor.latitude] },
      properties: { id: sensor.id, pm10: sensor.pm10 }
    }
  });
  // console.log(data)
  return { type: "FeatureCollection", features: formatted };
  // return { type: "FeatureCollection", features: data };

}

const Map = dynamic(() => import("../components/Map"), {
  loading: () => <p>Loading...</p>,
  ssr: false,
});
const url = `https://api.mapbox.com/geocoding/v5/mapbox.places/greggs.json?access_token=${process.env.NEXT_PUBLIC_MAPBOX_TOKEN}&bbox=-1.907158%2C52.472952%2C-1.875916%2C52.490725&limit=10`;
// const url = `https://api.mapbox.com/geocoding/v5/mapbox.places/greggs.json?access_token=${process.env.NEXT_PUBLIC_MAPBOX_TOKEN}&bbox=-1.892138%2C52.482127%2C-1.884756%2C52.490071&limit=10`

const Home: NextPage = ({plumeData}) => {
  const [locations, setLocations] = useState([]);
  const [showPopup, setShowPopup] = useState(true);
  useEffect(() => {
    const fetchLocations = async () => {
      await fetch(url)
        .then((response) => response.text())
        .then((res) => JSON.parse(res))
        .then((json) => {
          setLocations(json.features);
        })
        .catch((err) => console.log({ err }));
    //   await prisma.plume_sensor.findMany({
    //     select: {
    //       id: true,
    //       latitude: true,
    //       longitude: true,
    //     },
    //     orderBy: {
    //       id: "desc"
    //     }
    //   }).then((res) => setLocations(formatSensorData(res).features))
    };
    // fetchLocations();
    console.log(plumeData)
    setLocations(formatSensorData(plumeData))
  }, []);
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        
        <Map locations={locations}  />
        
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
};

export default Home;
